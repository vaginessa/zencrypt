/*
 * Copyright 2018 Priyank Vasa
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pvryan.easycrypt.symmetric

import com.nulabinc.zxcvbn.Strength
import com.nulabinc.zxcvbn.matchers.Match

@Suppress("MemberVisibilityCanBePrivate")
/**
 * Password analysis generated by [ECPasswordAnalyzer.analyze]
 * @property strength of the password from [ECPasswordStrengths]
 * @property guesses needed to crack password
 * @property guessesLog10 order of magnitude of guesses
 * @property calcTime it took to calculate an answer, in milliseconds
 * @property crackTimeSeconds dictionary of back-of-the-envelope
 * crack time estimations, in seconds, based on a few scenarios
 * @property crackTimesDisplay same keys as result.crack_time_seconds,
 * with friendlier display string values: "less than a second", "3 hours", "centuries", etc.
 * @property feedback to help choose better passwords. set when score <= 2
 * @property password which is analysed
 * @property sequence list of patterns that analyzer based the guess calculation on
 */
class ECPasswordAnalysis(zxcvbnStrength: Strength) {

    val strength: ECPasswordStrengths = when (zxcvbnStrength.score) {
        0 -> ECPasswordStrengths.STRENGTH_VERY_WEAK
        1 -> ECPasswordStrengths.STRENGTH_WEAK
        2 -> ECPasswordStrengths.STRENGTH_AVERAGE
        3 -> ECPasswordStrengths.STRENGTH_STRONG
        4 -> ECPasswordStrengths.STRENGTH_VERY_STRONG
        else -> ECPasswordStrengths.STRENGTH_VERY_WEAK
    }

    val guesses = zxcvbnStrength.guesses
    val guessesLog10 = zxcvbnStrength.guessesLog10
    val calcTime = zxcvbnStrength.calcTime

    val crackTimeSeconds: CrackTimeSeconds = CrackTimeSeconds(
            zxcvbnStrength.crackTimeSeconds.offlineFastHashing1e10PerSecond,
            zxcvbnStrength.crackTimeSeconds.offlineSlowHashing1e4perSecond,
            zxcvbnStrength.crackTimeSeconds.onlineNoThrottling10perSecond,
            zxcvbnStrength.crackTimeSeconds.onlineThrottling100perHour)

    val crackTimesDisplay: CrackTimesDisplay = CrackTimesDisplay(
            zxcvbnStrength.crackTimesDisplay.offlineFastHashing1e10PerSecond,
            zxcvbnStrength.crackTimesDisplay.offlineSlowHashing1e4perSecond,
            zxcvbnStrength.crackTimesDisplay.onlineNoThrottling10perSecond,
            zxcvbnStrength.crackTimesDisplay.onlineThrottling100perHour)

    val feedback: Feedback = Feedback(
            zxcvbnStrength.feedback.suggestions,
            zxcvbnStrength.feedback.warning)

    val password: String = zxcvbnStrength.password as String
    val sequence: MutableList<Match> = zxcvbnStrength.sequence

    /**
     * Dictionary of back-of-the-envelope crack time estimations,
     * in seconds, based on a few scenarios
     *
     * @property onlineThrottling100perHour online attack
     * on a service that rate limits password auth attempts
     * @property onlineNoThrottling10perSecond online attack on a service that
     * doesn't rate limit, or where an attacker has outsmarted rate limiting
     * @property offlineSlowHashing1e4perSecond offline attack. assumes multiple
     * attackers, proper user-unique salting, and a slow hash function
     * w/ moderate work factor, such as bcrypt, scrypt, PBKDF2
     * @property offlineFastHashing1e10PerSecond offline attack with user-unique
     * salting but a fast hash function like SHA-1, SHA-256 or MD5. A wide range of
     * reasonable numbers anywhere from one billion - one trillion guesses per second,
     * depending on number of cores and machines. Ball-parking at 10B/sec.
     */
    data class CrackTimeSeconds(
            val offlineFastHashing1e10PerSecond: Double,
            val offlineSlowHashing1e4perSecond: Double,
            val onlineNoThrottling10perSecond: Double,
            val onlineThrottling100perHour: Double
    )

    /**
     * same keys as result.crack_time_seconds,
     * with friendlier display string values:
     * "less than a second", "3 hours", "centuries", etc.
     */
    data class CrackTimesDisplay(
            val offlineFastHashing1e10PerSecond: String,
            val offlineSlowHashing1e4perSecond: String,
            val onlineNoThrottling10perSecond: String,
            val onlineThrottling100perHour: String
    )

    /**
     * Verbal feedback to help choose better passwords. set when score <= 2.
     *
     * @property suggestions a possibly-empty list of suggestions to help
     * choose a less guessable password. eg. 'Add another word or two'
     * @property warning explains what's wrong, eg. 'this is a top-10 common password'.
     * not always set -- sometimes an empty string
     */
    data class Feedback(val suggestions: MutableList<String>, val warning: String)

}
